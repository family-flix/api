generator client {
        provider = "prisma-client-js"
}

datasource db {
        provider = "sqlite"
        url      = env("DATABASE_PATH")
}

model drive {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 网盘名称（备注）
        name             String?
        // 阿里云对网盘的唯一标志，每次请求都需要带上该参数
        drive_id         String    @unique
        // 阿里云对网盘在该设备下的id？
        device_id        String
        // 网盘 user_id
        aliyun_user_id   String
        // 网盘提供的名称
        user_name        String
        // 网盘提供的名称
        nick_name        String
        // 网盘提供的头像
        avatar           String
        // 网盘提供的
        app_id           String
        // 总大小
        total_size       Float?    @default(0)
        // 已使用
        used_size        Float?    @default(0)
        // 是否禁用
        invalid          Int?      @default(0)
        // 最近一次索引该网盘的时间
        latest_analysis  DateTime?
        // 网盘用于存放影视剧的目录
        root_folder_name String?
        // 网盘用于存放影视剧的目录 file_id
        root_folder_id   String?

        user_id String
        user    user   @relation(fields: [user_id], references: [id])

        drive_token     drive_token?
        drive_analysis  drive_analysis[]
        drive_check_in  drive_check_in[]
        files           file[]
        tmp_files       tmp_file[]
        parsed_tvs      parsed_tv[]
        parsed_episodes parsed_episode[]

        @@map("Drive")
}

// 因为 refresh_token 需要经常更新所以单独拿出来作为表（这样合理吗？）
model drive_token {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        access_token  String
        refresh_token String
        expired_at    Float

        // 关联 drive 表
        drive_id String @unique
        drive    drive  @relation(fields: [drive_id], references: [id])

        @@map("DriveToken")
}

// 电视剧基本信息
model tv_profile {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // tmdb 记录 id
        tmdb_id           Int?    @default(0)
        // 电视剧名称
        name              String?
        // 电视剧原始名称/外文名称
        original_name     String?
        // 描述
        overview          String?
        // 海报地址
        poster_path       String?
        // 背景图片
        backdrop_path     String?
        // 首播日期
        first_air_date    String?
        // 原始语言，可用来区分日剧、国产还是美剧等
        original_language String?
        // 评分
        popularity        Float?  @default(0)
        // 评分
        vote_average      Float?  @default(0)
        // 评分
        vote_count        Float?  @default(0)

        // tv_need_complete incomplete_tv[]
        tv             tv?
        season_profile season_profile[]
        snapshots      tv_profile_quick[]

        @@map("TVProfile")
}

// 电视剧季基本信息
model season_profile {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 首播日期
        air_date      String?
        // 该季总集数
        episode_count Int?    @default(0)
        // 季名称
        name          String?
        // 季描述
        overview      String?
        // 季海报
        poster_path   String?
        // 季数
        season_number Float?
        // tmdb 记录 id
        tmdb_id       Float?
        // tmdb 记录 tv id
        tmdb_tv_id    Int?

        // 关联 tv_profile 表
        tv_profile_id String
        tv_profile    tv_profile @relation(fields: [tv_profile_id], references: [id])

        // tv_need_complete incomplete_tv[]
        episode_profiles episode_profile[]
        episode          episode[]
        season           season[]

        @@map("SeasonProfile")
}

model episode_profile {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        season_profile_id String?
        season_profile    season_profile? @relation(fields: [season_profile_id], references: [id])
        episode           episode[]
}

// 根据 parsed_episode 创建的电视剧
model parsed_tv {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 根据文件夹/文件名称推测出的电视剧名称
        name          String?
        // 根据文件夹/文件名称推测出的电视剧原始名称或外文译名
        original_name String?
        // 从哪个文件夹推断
        file_id       String?
        // 从哪个文件夹推断
        file_name     String?
        // 是否可以搜索（搜索后没结果会置为 0，更新该记录后又置为1，避免重复搜索）
        can_search    Float?  @default(1)

        tv_id    String?
        tv       tv?     @relation(fields: [tv_id], references: [id])
        // 关联 drive 表
        drive_id String
        drive    drive   @relation(fields: [drive_id], references: [id], onDelete: Cascade)
        // 关联 user 表
        user_id  String
        user     user    @relation(fields: [user_id], references: [id], onDelete: Cascade)

        parsed_episodes parsed_episode[]
        play_history    play_history[]

        @@map("ParsedTV")
}

// 根据云盘文件解析结果创建的剧集
model parsed_episode {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 第几集
        episode        String
        // 第几季
        season         String
        // 电视剧名称
        name           String
        // 云盘文件 id
        file_id        String
        // 云盘文件名称
        file_name      String
        // 父文件夹 file_id
        parent_file_id String
        // 文件路径
        parent_paths   String
        // 1文件 2文件夹 3未知
        type           Int
        // 文件大小
        size           BigInt? @default(0)

        parsed_tv_id String
        parsed_tv    parsed_tv @relation(fields: [parsed_tv_id], references: [id], onDelete: Cascade)
        // file_id      String    @unique
        // file         file      @relation(fields: [file_id], references: [id], onDelete: Cascade)
        user_id      String
        user         user      @relation(fields: [user_id], references: [id], onDelete: Cascade)
        drive_id     String
        drive        drive     @relation(fields: [drive_id], references: [id], onDelete: Cascade)

        @@map("ParsedEpisode")
}

// 云盘文件解析出认为是电影
model parsed_movie {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 电视剧名称
        name           String
        // 云盘文件 id
        file_id        String
        // 云盘文件名称
        file_name      String
        // 父文件夹 file_id
        parent_file_id String
        // 文件路径
        parent_paths   String
        // 1文件 2文件夹 3未知
        type           Int
        // 文件大小
        size           BigInt? @default(0)

        // 关联云盘文件
        // file_id String @unique
        // file    file   @relation(fields: [file_id], references: [id], onDelete: Cascade)
        // 关联 user 表
        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("ParsedMovie")
}

// 根据 parsed_episode 信息创建的电视剧
model tv {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())
        // 是否隐藏
        hidden  Float?   @default(0)

        // 关联 tv_profile 表
        profile_id String?     @unique
        profile    tv_profile? @relation(fields: [profile_id], references: [id])
        // 关联 user 表
        user_id    String
        user       user        @relation(fields: [user_id], references: [id], onDelete: Cascade)

        seasons         season[]
        maybe_tvs       parsed_tv[]
        recommended_tvs recommended_tv[]
        episode         episode[]
        play_history    play_history[]

        @@map("TV")
}

// 根据 parsed_episode 信息创建的季
model season {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        season String

        profile_id   String?         @unique
        profile      season_profile? @relation(fields: [profile_id], references: [id])
        tv_id        String
        tv           tv              @relation(fields: [tv_id], references: [id])
        user_id      String
        user         user            @relation(fields: [user_id], references: [id])
        play_history play_history[]

        @@map("Season")
}

// 根据 parsed_episode 创建的剧集
model episode {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 第几集
        episode String

        profile_id String?          @unique
        profile    episode_profile? @relation(fields: [profile_id], references: [id])
        tv_id      String
        tv         tv               @relation(fields: [tv_id], references: [id])
        user_id    String
        user       user             @relation(fields: [user_id], references: [id])

        play_history     play_history[]
        season_profile   season_profile? @relation(fields: [season_profileId], references: [id])
        season_profileId String?

        @@map("Episode")
}

model async_task {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id String
        desc      String?
        status    Int?    @default(0)
        need_stop Int?    @default(0)

        user_id String
        user    user   @relation(fields: [user_id], references: [id])

        @@map("AsyncTask")
}

model drive_analysis {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        drive_id String
        drive    drive  @relation(fields: [drive_id], references: [id])

        @@map("DriveAnalysis")
}

model drive_check_in {
        id         String    @id
        created    DateTime  @default(now())
        updated    DateTime  @default(now())
        // 签到时间
        checked_at DateTime?

        // 关联 drive 表
        drive_id String
        drive    drive  @relation(fields: [drive_id], references: [id])

        @@map("DriveCheckIn")
}

model movie {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 电影名称
        name          String?
        // 电影原始名称/外文名称
        original_name String?

        // 关联 user 表
        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        play_histories play_history[]

        @@map("Movie")
}

model play_history {
        id           String   @id
        created      DateTime @default(now())
        updated      DateTime @default(now())
        // 当前播放的影片总时长
        duration     Float?   @default(0)
        // 当前播放进度
        current_time Float?   @default(0)

        // 关联 tv 表
        tv_id       String?
        tv          tv?        @relation(fields: [tv_id], references: [id], onDelete: Cascade)
        season_id   String?
        season      season?    @relation(fields: [season_id], references: [id], onDelete: Cascade)
        episode_id  String?
        episode     episode?   @relation(fields: [episode_id], references: [id], onDelete: Cascade)
        movie_id    String?
        movie       movie?     @relation(fields: [movie_id], references: [id], onDelete: Cascade)
        member_id   String
        member      member     @relation(fields: [member_id], references: [id], onDelete: Cascade)
        parsed_tv   parsed_tv? @relation(fields: [parsed_tvId], references: [id])
        parsed_tvId String?
        user        user?      @relation(fields: [userId], references: [id])
        userId      String?

        @@map("PlayHistory")
}

model recommended_tv {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())
        sort    Float?   @default(0)

        tv_id     String
        tv        tv     @relation(fields: [tv_id], references: [id])
        member_id String
        member    member @relation(fields: [member_id], references: [id])

        @@map("RecommendedTV")
}

// 用名字将 tv_profile 关联起来，当在 tmdb 搜索时优先在该表中查询，提高搜索性能
model tv_profile_quick {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())
        name    String   @unique

        tv_profile_id String
        tv_profile    tv_profile @relation(fields: [tv_profile_id], references: [id])

        @@map("TVProfileQuick")
}

model shared_file {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())
        // 分享链接名称
        title   String?
        // 分享链接
        url     String   @unique

        // 关联 user 表
        user_id String
        user    user   @relation(fields: [user_id], references: [id])

        @@map("SharedFile")
}

model shared_file_in_progress {
        id             String   @id
        created        DateTime @default(now())
        updated        DateTime @default(now())
        // 关联的分享文件夹 file_id
        file_id        String
        // 关联的分享文件夹名称
        name           String
        // 关联的目标文件夹 file_id
        target_file_id String?
        // 是否已完结
        complete       Float?   @default(0)
        // 分享文件夹所属 url
        url            String
        // 该分享文件夹是否失效
        need_update    Float?   @default(0)

        // 关联 user 表
        user_id String
        user    user   @relation(fields: [user_id], references: [id])

        @@map("SharedFileInProgress")
}

// 在后台转存后分享文件夹后，在这里会新增一条记录，下次自动索引网盘时仅索引该表内记录
model tmp_file {
        id           String   @id
        created      DateTime @default(now())
        updated      DateTime @default(now())
        // 文件夹/文件 名称
        name         String
        // 0文件夹 1文件
        type         Float?   @default(0)
        // 父文件夹路径
        parent_paths String

        // 关联 drive 表
        drive_id String
        drive    drive  @relation(fields: [drive_id], references: [id])

        // 关联 user 表
        user_id String
        user    user   @relation(fields: [user_id], references: [id])

        @@map("TmpFile")
}

model incomplete_tv {
        id            String   @id
        created       DateTime @default(now())
        updated       DateTime @default(now())
        // 总集数
        episode_count Float?   @default(0)
        // 当前集数
        cur_count     Float?   @default(0)

        // searched_season_id String
        // season_profile     season_profile @relation(fields: [searched_season_id], references: [id])
        // tv_profile_id      String
        // tv_profile         tv_profile     @relation(fields: [tv_profile_id], references: [id])
        user_id String
        user    user   @relation(fields: [user_id], references: [id])

        @@map("TVNeedComplete")
}

model file {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 文件 id
        file_id        String
        // 文件名称
        name           String
        // 父文件夹 file_id
        parent_file_id String
        // 文件路径
        parent_paths   String
        // 1文件 2文件夹 3未知
        type           Int
        // 文件大小
        size           BigInt? @default(0)

        // 关联 drive 表
        drive_id String
        drive    drive  @relation(fields: [drive_id], references: [id])
        // 关联 user 表
        user_id  String
        user     user   @relation(fields: [user_id], references: [id])

        // parsed_episode_id String?
        // parsed_episode    parsed_episode?
        // parsed_movie      parsed_movie?

        @@map("File")
}

model log {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())
        title   String

        @@map("Log")
}

model member {
        id       String   @id
        created  DateTime @default(now())
        updated  DateTime @default(now())
        // 成员邮箱
        email    String?
        // 成员名字
        name     String?
        // 成员备注
        remark   String   @unique
        // 是否禁用
        disabled Float?   @default(0)

        // 关联 user 表
        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        member_tokens   member_token[]
        play_histories  play_history[]
        recommended_tvs recommended_tv[]

        @@map("Member")
}

model member_token {
        id         String   @id
        created    DateTime @default(now())
        updated    DateTime @default(now())
        // 成员授权凭证
        token      String
        // 该 token 是否被使用
        used       Float?   @default(0)
        // 过期时间
        expired_at String?

        // 关联 member 表
        member_id String
        member    member @relation(fields: [member_id], references: [id], onDelete: Cascade)

        @@map("MemberToken")
}

model account {
        id                  String  @id
        type                String
        provider            String
        provider_account_id String
        refresh_token       String?
        access_token        String?
        expires_at          Int?
        token_type          String?
        scope               String?
        id_token            String?
        session_state       String?

        user_id String
        user    user   @relation(fields: [user_id], references: [id])

        @@unique([provider, provider_account_id])
        @@index([user_id], map: "accounts_user_id_fkey")
        @@map("Account")
}

model credential {
        id       String  @id
        password String
        salt     String
        verified Boolean @default(false)
        email    String  @unique

        user_id String @unique
        user    user   @relation(fields: [user_id], references: [id])

        @@map("Credential")
}

model profile {
        id       String  @id
        nickname String?
        avatar   String?
        user_id  String  @unique
        user     user    @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("Profile")
}

model user {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        credential              credential?
        profile                 profile?
        settings                settings?
        accounts                account[]
        drives                  drive[]
        tv                      tv[]
        movie                   movie[]
        seasons                 season[]
        parsed_tvs              parsed_tv[]
        parsed_episodes         parsed_episode[]
        parsed_movies           parsed_movie[]
        tv_need_complete        incomplete_tv[]
        async_task              async_task[]
        play_histories          play_history[]
        episode                 episode[]
        folder                  file[]
        member                  member[]
        shared_file             shared_file[]
        shared_file_in_progress shared_file_in_progress[]
        tmp_folder              tmp_file[]

        @@map("User")
}

// 用户配置
model settings {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        upload_tmdb_image Int? @default(0)

        qiniu_access_token String?
        qiniu_secret_token String?
        qiniu_scope        String?
        push_deer_token    String?
        tmdb_token         String?
        websites           String?

        user_id String @unique
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("Settings")
}
