generator client {
        provider      = "prisma-client-js"
        binaryTargets = ["native"]
}

datasource db {
        provider = "sqlite"
        url      = env("DATABASE_PATH")
}

model drive {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id        String
        type             Int?      @default(0)
        name             String
        remark           String?
        avatar           String
        // json
        profile          String
        // 总大小
        total_size       Float?    @default(0)
        // 已使用
        used_size        Float?    @default(0)
        // 是否禁用
        invalid          Int?      @default(0)
        // 最近一次索引该网盘的时间
        latest_analysis  DateTime?
        // 网盘用于存放影视剧的目录
        root_folder_name String?
        // 网盘用于存放影视剧的目录 file_id
        root_folder_id   String?

        drive_token_id String
        drive_token    drive_token @relation(fields: [drive_token_id], references: [id], onDelete: Cascade)
        user_id        String
        user           user        @relation(fields: [user_id], references: [id], onDelete: Cascade)

        parsed_tvs              parsed_tv[]
        parsed_seasons          parsed_season[]
        parsed_episodes         parsed_episode[]
        drive_check_in          drive_check_in[]
        files                   file[]
        tmp_files               tmp_file[]
        parsed_movies           parsed_movie[]
        shared_file_in_progress shared_file_in_progress[]
        subtitles               subtitle[]

        @@unique([user_id, unique_id])
        @@map("Drive")
}

// 因为 refresh_token 需要经常更新所以单独拿出来作为表（这样合理吗？）
model drive_token {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // json
        data       String
        expired_at Float
        drives     drive[]

        @@map("DriveToken")
}

// 电视剧基本信息
model tv_profile {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id         String
        source            Int?    @default(0)
        sources           String? @default("")
        // 电视剧名称
        name              String?
        // 电视剧原始名称/外文名称
        original_name     String?
        // 描述
        overview          String?
        // 海报地址
        poster_path       String?
        // 背景图片
        backdrop_path     String?
        // 首播日期
        first_air_date    String?
        // 原始语言
        original_language String?
        // 产地 HK(港剧)、CN(国产剧)、KR(韩剧)、US(美剧)、IN(印度)、JP(日剧)
        origin_country    String? @default("")
        // 标签(区分动画，也是用这个字段来区分)
        genres            String? @default("")
        // 热度
        popularity        Float?  @default(0)
        // 评分，10分制
        vote_average      Float?  @default(0)
        // 评分人数
        vote_count        Float?  @default(0)
        // 总集数
        episode_count     Int?    @default(0)
        // 总季数
        season_count      Int?    @default(0)
        // (Ended已完结)、(Returning Series回归剧)
        status            String?
        // 是否更新中
        in_production     Int?    @default(0)

        tvs       tv[]
        snapshots tv_profile_quick[]

        @@map("TVProfile")
}

// 电视剧季基本信息
model season_profile {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id     String
        source        Int?    @default(0)
        sources       String? @default("")
        name          String?
        overview      String?
        poster_path   String?
        season_number Int?
        air_date      String?
        episode_count Int?    @default(0)

        seasons season[]

        @@map("SeasonProfile")
}

model episode_profile {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id      String
        source         Int?    @default(0)
        sources        String? @default("")
        name           String?
        overview       String?
        air_date       String?
        runtime        Int?    @default(0)
        episode_number Int?
        season_number  Int?

        episodes episode[]
}

model movie_profile {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id         String
        source            Int?    @default(0)
        sources           String? @default("")
        name              String?
        original_name     String?
        overview          String?
        poster_path       String?
        backdrop_path     String?
        air_date          String?
        original_language String?
        popularity        Float?  @default(0)
        vote_average      Float?  @default(0)
        vote_count        Float?  @default(0)
        origin_country    String? @default("")
        genres            String? @default("")
        runtime           Int?    @default(0)

        movies movie[]
}

model subtitle {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        file_id  String
        name     String
        language String

        movie_id   String?
        movie      movie?   @relation(fields: [movie_id], references: [id])
        episode_id String?
        episode    episode? @relation(fields: [episode_id], references: [id])
        drive_id   String
        drive      drive    @relation(fields: [drive_id], references: [id], onDelete: Cascade)
        user_id    String
        user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// 根据 parsed_episode 创建的电视剧
model parsed_tv {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 根据文件夹/文件名称推测出的电视剧名称
        name          String?
        // 根据文件夹/文件名称推测出的电视剧原始名称或外文译名
        original_name String?
        file_id       String?
        file_name     String?
        // 是否可以搜索（搜索后没结果会置为 0，更新该记录后又置为1，避免重复搜索）
        can_search    Int?    @default(1)
        correct_name  String?
        // 用户手动设置的 tmbd_id，优先使用该值索引
        tmdb_id       Int?

        tv_id    String?
        tv       tv?     @relation(fields: [tv_id], references: [id])
        drive_id String
        drive    drive   @relation(fields: [drive_id], references: [id], onDelete: Cascade)
        user_id  String
        user     user    @relation(fields: [user_id], references: [id], onDelete: Cascade)

        parsed_episodes parsed_episode[]
        parsed_seasons  parsed_season[]
        binds           bind_for_parsed_tv[]

        @@map("ParsedTV")
}

model parsed_season {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        season_number         String
        file_id               String?
        file_name             String?
        can_search            Int?    @default(1)
        correct_season_number String?

        season_id    String?
        season       season?   @relation(fields: [season_id], references: [id])
        parsed_tv_id String
        parsed_tv    parsed_tv @relation(fields: [parsed_tv_id], references: [id], onDelete: Cascade)
        drive_id     String
        drive        drive     @relation(fields: [drive_id], references: [id], onDelete: Cascade)
        user_id      String
        user         user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

        parsed_episodes parsed_episode[]

        @@map("ParsedSeason")
}

// 根据云盘文件解析结果创建的剧集
model parsed_episode {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 第几集
        episode_number String
        // 第几季
        season_number  String
        // 电视剧名称
        name           String
        // 云盘文件 id
        file_id        String
        // 云盘文件名称
        file_name      String
        // 父文件夹 file_id
        parent_file_id String
        // 文件路径
        parent_paths   String
        // 1文件 2文件夹 3未知
        type           Int
        // 文件大小
        size           Float? @default(0)
        can_search     Int?   @default(1)

        episode_id       String?
        episode          episode?      @relation(fields: [episode_id], references: [id], onDelete: Cascade)
        parsed_tv_id     String
        parsed_tv        parsed_tv     @relation(fields: [parsed_tv_id], references: [id], onDelete: Cascade)
        parsed_season_id String
        parsed_season    parsed_season @relation(fields: [parsed_season_id], references: [id])
        drive_id         String
        drive            drive         @relation(fields: [drive_id], references: [id], onDelete: Cascade)
        user_id          String
        user             user          @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("ParsedEpisode")
}

// 云盘文件解析出认为是电影
model parsed_movie {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 电视剧名称
        name           String
        original_name  String?
        correct_name   String?
        // 云盘文件 id
        file_id        String
        // 云盘文件名称
        file_name      String
        // 父文件夹 file_id
        parent_file_id String
        // 文件路径
        parent_paths   String
        // 1文件 2文件夹 3未知
        type           Int
        // 文件大小
        size           Float?  @default(0)
        can_search     Int?    @default(1)

        movie_id String?
        movie    movie?  @relation(fields: [movie_id], references: [id], onDelete: Cascade)
        drive_id String
        drive    drive   @relation(fields: [drive_id], references: [id], onDelete: Cascade)
        user_id  String
        user     user    @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("ParsedMovie")
}

// 根据 parsed_episode 信息创建的电视剧
model tv {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 是否隐藏
        hidden Int? @default(0)

        profile_id    String
        profile       tv_profile  @relation(fields: [profile_id], references: [id])
        collection_id String?
        collection    collection? @relation(fields: [collection_id], references: [id])
        user_id       String
        user          user        @relation(fields: [user_id], references: [id], onDelete: Cascade)

        seasons        season[]
        episodes       episode[]
        play_histories play_history[]
        parsed_tvs     parsed_tv[]
        reports        report[]

        @@unique([user_id, profile_id])
        @@map("TV")
}

// 根据 parsed_episode 信息创建的季
model season {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        season_text   String
        season_number Int

        profile_id    String
        profile       season_profile @relation(fields: [profile_id], references: [id])
        collection_id String?
        collection    collection?    @relation(fields: [collection_id], references: [id])
        tv_id         String
        tv            tv             @relation(fields: [tv_id], references: [id], onDelete: Cascade)
        user_id       String
        user          user           @relation(fields: [user_id], references: [id], onDelete: Cascade)

        parsed_season parsed_season[]
        // play_histories play_history[]
        episodes      episode[]
        reports       report[]

        @@unique([user_id, profile_id])
        @@map("Season")
}

// 根据 parsed_episode 创建的剧集
model episode {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        episode_text   String
        season_text    String
        episode_number Int

        profile_id String
        profile    episode_profile @relation(fields: [profile_id], references: [id])
        tv_id      String
        tv         tv              @relation(fields: [tv_id], references: [id], onDelete: Cascade)
        season_id  String
        season     season          @relation(fields: [season_id], references: [id], onDelete: Cascade)
        user_id    String
        user       user            @relation(fields: [user_id], references: [id], onDelete: Cascade)

        parsed_episodes parsed_episode[]
        play_histories  play_history[]
        reports         report[]
        subtitles       subtitle[]

        @@unique([user_id, profile_id])
        @@map("Episode")
}

model movie {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        profile_id String
        profile    movie_profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)

        // 关联 user 表
        user_id       String
        user          user        @relation(fields: [user_id], references: [id], onDelete: Cascade)
        collection_id String?
        collection    collection? @relation(fields: [collection_id], references: [id])

        play_histories play_history[]
        parsed_movies  parsed_movie[]
        reports        report[]
        subtitles      subtitle[]

        @@unique([user_id, profile_id])
        @@map("Movie")
}

model collection {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        title String
        desc  String?

        tvs     tv[]
        seasons season[]
        movies  movie[]

        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("Collection")
}

model async_task {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id String
        type      Int?    @default(0)
        desc      String?
        status    Int?    @default(0)
        need_stop Int?    @default(0)
        error     String?

        output_id String @unique
        output    output @relation(fields: [output_id], references: [id], onDelete: Cascade)
        user_id   String
        user      user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("AsyncTask")
}

model output {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        lines output_line[]

        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        async_task async_task?
}

model output_line {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // json
        content String

        output_id String?
        output    output? @relation(fields: [output_id], references: [id])
}

model play_history {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 当前播放的影片总时长
        duration     Float?  @default(0)
        // 当前播放进度
        current_time Float?  @default(0)
        // 当前播放进度对应的缩略图
        thumbnail    String?
        // 当前播放影片对应的源文件id
        file_id      String?

        tv_id      String?
        tv         tv?      @relation(fields: [tv_id], references: [id], onDelete: Cascade)
        // season_id  String?
        // season     season?  @relation(fields: [season_id], references: [id])
        episode_id String?
        episode    episode? @relation(fields: [episode_id], references: [id])
        movie_id   String?
        movie      movie?   @relation(fields: [movie_id], references: [id], onDelete: Cascade)

        member_id String
        member    member @relation(fields: [member_id], references: [id], onDelete: Cascade)

        @@map("PlayHistory")
}

// 用名字将 tv_profile 关联起来，当在 tmdb 搜索时优先在该表中查询，提高搜索性能
// 已废弃
model tv_profile_quick {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())
        name    String   @unique

        tv_profile_id String
        tv_profile    tv_profile @relation(fields: [tv_profile_id], references: [id], onDelete: Cascade)

        @@map("TVProfileQuick")
}

model shared_file {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())
        // 分享链接名称
        title   String?
        // 分享链接
        url     String

        // 关联 user 表
        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("SharedFile")
}

// 一次分享资源转存记录（文件夹
model shared_file_in_progress {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 分享文件夹所属 url
        url     String
        // 转存的分享文件夹 file_id
        file_id String
        // 转存的分享文件夹名称
        name    String

        drive_id String
        drive    drive  @relation(fields: [drive_id], references: [id], onDelete: Cascade)
        user_id  String
        user     user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("SharedFileInProgress")
}

// 文件夹同步任务（连接分享资源和云盘内的文件夹的关系，用于将分享资源新增的影片同步到云盘内文件夹(parsed_tv.file_id 字段表示云盘内文件夹)
model bind_for_parsed_tv {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 分享文件夹所属 url
        url           String
        // 关联的分享文件夹 file_id
        file_id       String
        // 关联的分享文件夹名称
        name          String
        // 是否连载中
        in_production Int?   @default(1)
        // 分享资源是否失效
        invalid       Int?   @default(0)

        parsed_tv_id String
        parsed_tv    parsed_tv @relation(fields: [parsed_tv_id], references: [id], onDelete: Cascade)
        user_id      String
        user         user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("BindForParsedTV")
}

model drive_check_in {
        id         String    @id
        created    DateTime  @default(now())
        updated    DateTime  @default(now())
        // 签到时间
        checked_at DateTime?

        // 关联 drive 表
        drive_id String
        drive    drive  @relation(fields: [drive_id], references: [id], onDelete: Cascade)

        @@map("DriveCheckIn")
}

// 在后台转存后分享文件夹后，在这里会新增一条记录，下次自动索引网盘时仅索引该表内记录
// 以及 转存文件到索引云盘中间这段时间避免重复添加文件（这时候靠和 parent_paths/name 做唯一值避免重复）
// 两个作用都有
model tmp_file {
        id           String   @id
        created      DateTime @default(now())
        updated      DateTime @default(now())
        // 文件夹/文件 名称
        name         String
        // 0文件夹 1文件
        type         Float?   @default(0)
        // 父文件夹路径，其实基本上都是 drive.root_folder_name（有什么用？）
        parent_paths String

        // 关联 drive 表
        drive_id String
        drive    drive  @relation(fields: [drive_id], references: [id], onDelete: Cascade)

        // 关联 user 表
        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("TmpFile")
}

model incomplete_tv {
        id            String   @id
        created       DateTime @default(now())
        updated       DateTime @default(now())
        // 总集数
        episode_count Float?   @default(0)
        // 当前集数
        cur_count     Float?   @default(0)

        // searched_season_id String
        // season_profile     season_profile @relation(fields: [searched_season_id], references: [id])
        // tv_profile_id      String
        // tv_profile         tv_profile     @relation(fields: [tv_profile_id], references: [id])
        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("TVNeedComplete")
}

model file {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 文件 id
        file_id        String
        // 文件名称
        name           String
        // 父文件夹 file_id
        parent_file_id String
        // 文件路径
        parent_paths   String
        // 1文件 2文件夹 3未知
        type           Int
        // 文件大小
        size           Float? @default(0)

        // 关联 drive 表
        drive_id String
        drive    drive  @relation(fields: [drive_id], references: [id], onDelete: Cascade)
        // 关联 user 表
        user_id  String
        user     user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("File")
}

model log {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())
        title   String

        @@map("Log")
}

// model qrcode {
//         id      String   @id
//         created DateTime @default(now())
//         updated DateTime @default(now())
//         title   String

//         @@map("Qrcode")
// }

model member {
        id         String   @id
        created    DateTime @default(now())
        updated    DateTime @default(now())
        // 成员邮箱
        email      String?
        // 成员名字
        name       String?
        avatar     String?
        // 成员备注
        remark     String
        // 权限 json
        permission String?
        // 是否禁用
        disabled   Int?     @default(0)
        // 软删除
        delete     Int?     @default(0)

        inviter_id String?
        inviter    member? @relation("InviterToInvitees", fields: [inviter_id], references: [id])
        user_id    String
        user       user    @relation(fields: [user_id], references: [id], onDelete: Cascade)

        member_setting member_setting?
        member_tokens  member_token[]
        play_histories play_history[]
        reports        report[]
        invitees       member[]              @relation("InviterToInvitees")
        notifications  member_notification[]

        @@unique([user_id, inviter_id, remark])
        @@map("Member")
}

model member_token {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 成员授权凭证
        token      String
        // 该 token 是否被使用
        used       Float?  @default(0)
        // 过期时间
        expired_at String?

        // 关联 member 表
        member_id String
        member    member @relation(fields: [member_id], references: [id], onDelete: Cascade)

        @@map("MemberToken")
}

// 成员配置
model member_setting {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // json
        data String

        member_id String @unique
        member    member @relation(fields: [member_id], references: [id], onDelete: Cascade)

        @@map("MemberSetting")
}

model permission {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        desc String
        code String

        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("Permission")
}

model member_notification {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id String
        content   String?
        type      Int?    @default(1)
        status    Int?    @default(1)
        is_delete Int?    @default(0)

        // 接收者
        member_id String
        member    member @relation(fields: [member_id], references: [id], onDelete: Cascade)

        @@map("MemberNotification")
}

model notification {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id String
        content   String?
        type      Int?    @default(1)
        status    Int?    @default(1)
        is_delete Int?    @default(0)

        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("Notification")
}

model report {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        type   Int
        // json
        data   String
        // json
        answer String

        tv_id      String?
        tv         tv?      @relation(fields: [tv_id], references: [id], onDelete: Cascade)
        season_id  String?
        season     season?  @relation(fields: [season_id], references: [id], onDelete: Cascade)
        episode_id String?
        episode    episode? @relation(fields: [episode_id], references: [id])
        movie_id   String?
        movie      movie?   @relation(fields: [movie_id], references: [id], onDelete: Cascade)
        member_id  String
        member     member   @relation(fields: [member_id], references: [id], onDelete: Cascade)
        user_id    String
        user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("Report")
}

// 三方授权凭证
model account {
        id                  String  @id
        type                String
        provider            String
        provider_account_id String
        refresh_token       String?
        access_token        String?
        expires_at          Int?
        token_type          String?
        scope               String?
        id_token            String?
        session_state       String?

        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@unique([provider, provider_account_id])
        @@map("Account")
}

// 邮箱密码凭证
model credential {
        id       String  @id
        password String
        salt     String
        verified Boolean @default(false)
        email    String  @unique

        user_id String @unique
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("Credential")
}

model profile {
        id       String  @id
        nickname String?
        avatar   String?
        user_id  String  @unique
        user     user    @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("Profile")
}

// 用户配置
model settings {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        detail String?

        user_id String @unique
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("Settings")
}

model user {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        credential              credential?
        profile                 profile?
        settings                settings?
        accounts                account[]
        drives                  drive[]
        tv                      tv[]
        seasons                 season[]
        episode                 episode[]
        movie                   movie[]
        parsed_tvs              parsed_tv[]
        parsed_seasons          parsed_season[]
        parsed_episodes         parsed_episode[]
        parsed_movies           parsed_movie[]
        tv_need_complete        incomplete_tv[]
        async_task              async_task[]
        files                   file[]
        members                 member[]
        shared_files            shared_file[]
        shared_file_in_progress shared_file_in_progress[]
        tmp_files               tmp_file[]
        binds_for_parsed_tv     bind_for_parsed_tv[]
        notifications           notification[]
        outputs                 output[]
        reports                 report[]
        collections             collection[]
        subtitles               subtitle[]
        permission              permission[]

        @@map("User")
}
