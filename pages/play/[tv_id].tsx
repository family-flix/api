/**
 * @file 视频播放页面
 */
import React, {
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState,
} from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { throttle } from "lodash/fp";
import { debounce } from "lodash/fp";
import {
  ArrowBigLeft,
  ArrowBigRight,
  ArrowLeft,
  Gauge,
  Glasses,
  List,
  Loader,
  MoreHorizontal,
  Pause,
  Play,
  RotateCw,
} from "lucide-react";

import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { cn } from "@/lib/utils";
import { Player } from "@/domains/player";
import { VideoPlayerWithoutSSR } from "@/components/VideoPlayer/nossr";
import { Button } from "@/components/ui/button";
import { TV } from "@/domains/tv";
import { useToast } from "@/hooks/use-toast";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

import { Slider } from "@/components/ui/slider";

const VideoPlayingPage = () => {
  const router = useRouter();
  const { tv_id } = router.query as { tv_id: string };
  const tv_ref = useRef(new TV({ id: tv_id }));
  const [profile, set_profile] = useState<{
    cur_episode: TV["cur_episode"];
    info: TV["info"];
  } | null>(null);
  const [error, set_error] = useState<string | null>(null);
  const { toast } = useToast();
  const [show_menus, set_show_menus] = useState(true);
  const player_ref = useRef(
    new Player({
      url: "",
      on_change(next_values) {
        // set_values(next_values);
        values_ref.current = next_values;
      },
    })
  );
  const values_ref = useRef(player_ref.current.values);
  const [values, set_values] = useState(player_ref.current.values);
  const [target_progress, set_target_progress] = useState(0);
  const hide_menus = useMemo(() => {
    return debounce(2000, () => {
      if (values_ref.current.playing) {
        set_show_menus(false);
      }
    });
  }, []);
  const toggle_menu_visible = useCallback(() => {
    set_show_menus((prev) => {
      const target_visible = !prev;
      if (values_ref.current.playing) {
        hide_menus();
      }
      return target_visible;
    });
  }, []);

  useEffect(() => {
    if (!tv_id) {
      return;
    }
    (async () => {
      tv_ref.current.on_error_notice = (msg) => {
        toast({
          title: "ERROR",
          description: msg,
        });
      };
      tv_ref.current.on_notice = (msg) => {
        toast({
          title: "Info",
          description: msg,
        });
      };
      const res = await tv_ref.current.init(tv_id);
      if (res.error) {
        set_error(res.error.message);
        return;
      }
      set_profile({
        cur_episode: tv_ref.current.cur_episode,
        info: tv_ref.current.info,
      });
    })();
  }, [tv_id]);

  const handle_video_playing = useMemo(() => {
    return throttle(10 * 1000, ({ current_time, duration }) => {
      tv_ref.current.update_play_progress({
        current_time,
        duration,
      });
    });
  }, []);

  if (error) {
    return (
      <div className="w-full h-[100vh]">
        <div className="center text-center">{error}</div>
      </div>
    );
  }
  // console.log(
  //   "[]VideoPlayingPage - render",
  //   profile?.cur_episode,
  //   target_progress
  // );

  return (
    <div>
      <Head>
        <title>
          {(() => {
            if (profile === null) {
              return "加载中...";
            }
            const { info, cur_episode } = profile;
            if (cur_episode === null || info === null) {
              return "加载中...";
            }
            return `${cur_episode.episode} - ${cur_episode.season} - ${info.name}`;
          })()}
        </title>
        <meta content="width=device-width, initial-scale=1" name="viewport" />
        <meta name="description" content="Generated by create next app" />
        <meta name="referrer" content="no-referrer" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="tv__video">
        {(() => {
          if (profile === null || profile.cur_episode === null) {
            return (
              <div className="w-full h-[100vh]">
                <div className="center text-center">正在加载中...</div>
              </div>
            );
          }
          const { url, width, height, current_time, thumbnail } =
            profile.cur_episode;
          return (
            <div className="overflow-hidden relative w-screen h-screen bg-black">
              <div className="absolute inset-0 z-10">
                <div
                  className={cn(
                    show_menus ? "hidden" : "block",
                    "absolute inset-0"
                  )}
                  onClick={toggle_menu_visible}
                />
                <div
                  className={cn(
                    show_menus ? "block" : "hidden",
                    "absolute inset-0"
                  )}
                  onClick={toggle_menu_visible}
                >
                  <div
                    className="p-4"
                    onClick={() => {
                      router.back();
                    }}
                  >
                    <ArrowLeft className="w-8 h-8 text-gray-100 dark:text-gray-100" />
                  </div>
                  <div className="absolute bottom-8 w-full">
                    {/* <div className="flex items-center w-36 m-auto">
                      <p className="text-2xl text-gray-100 dark:text-gray-100">
                        {values.target_time}
                      </p>
                      <p className="mx-2 text-2xl text-gray-100 dark:text-gray-100">
                        /
                      </p>
                      <p className="text-2xl text-gray-100 dark:text-gray-100">
                        {values.duration}
                      </p>
                    </div> */}
                    {/* <div
                      className="flex items-center mt-4 px-4"
                      onClick={(event) => {
                        event.stopPropagation();
                      }}
                    >
                      <p className="mr-2 text-gray-100 dark:text-gray-100">
                        {values.current_time}
                      </p>
                      <Slider
                        className=""
                        value={[target_progress]}
                        step={1}
                        max={100}
                        onValueChange={(v) => {
                          set_target_progress(v[0]);
                          player_ref.current.set_target_progress(v[0]);
                        }}
                        onValueCommit={() => {
                          player_ref.current.commit_target_progress();
                          hide_menus();
                        }}
                      />
                      <p className="ml-4 text-gray-100 dark:text-gray-100">
                        {values.duration}
                      </p>
                    </div> */}
                    <div className="grid grid-cols-3 gap-4 mt-24">
                      <div
                        className="flex flex-col items-center"
                        onClick={async () => {
                          await tv_ref.current.play_prev_episode();
                          set_profile({
                            cur_episode: tv_ref.current.cur_episode,
                            info: tv_ref.current.info,
                          });
                        }}
                      >
                        <ArrowBigLeft className="w-8 h-8 text-gray-100 dark:text-gray-100" />
                        <p className="mt-2 text-sm text-gray-100 dark:text-gray-100">
                          上一集
                        </p>
                      </div>
                      <div
                        className="flex flex-col items-center"
                        onClick={() => {
                          router.reload();
                        }}
                      >
                        <RotateCw className="w-8 h-8 text-gray-100 dark:text-gray-100" />
                        <p className="mt-2 text-sm text-gray-100 dark:text-gray-100">
                          刷新
                        </p>
                      </div>
                      <div
                        className="flex flex-col items-center"
                        onClick={async () => {
                          await tv_ref.current.play_next_episode();
                          set_profile({
                            cur_episode: tv_ref.current.cur_episode,
                            info: tv_ref.current.info,
                          });
                        }}
                      >
                        <ArrowBigRight className="w-8 h-8 text-gray-100 dark:text-gray-100" />
                        <p className="mt-2 text-sm text-gray-100 dark:text-gray-100">
                          下一集
                        </p>
                      </div>
                    </div>
                    <div className="grid grid-cols-4 gap-2 mt-12 w-full px-2">
                      <Sheet>
                        <SheetTrigger>
                          <div className="flex flex-col items-center">
                            <List className="w-6 h-6 text-gray-100 dark:text-gray-100" />
                            <p className="mt-2 text-sm text-gray-100 dark:text-gray-100">
                              选集
                            </p>
                          </div>
                        </SheetTrigger>
                        <SheetContent position="bottom" size="lg">
                          {(() => {
                            if (profile === null || profile.info === null) {
                              return <div>Loading</div>;
                            }
                            const { seasons, folders = [] } = profile.info;
                            const episodes_elm = (
                              <div className="">
                                {folders.map((folder) => {
                                  const { parent_paths, resolution, episodes } =
                                    folder;
                                  return (
                                    <div key={parent_paths}>
                                      <p className="p-4 bg-slate-100 dark:bg-slate-800">
                                        {resolution}
                                      </p>
                                      <div className="p-4">
                                        {episodes.map((episode) => {
                                          const {
                                            id,
                                            file_id,
                                            file_name,
                                            episode: e,
                                          } = episode;
                                          return (
                                            <div
                                              key={id}
                                              className={cn(
                                                "p-4 rounded cursor-pointer",
                                                profile?.cur_episode
                                                  ?.file_id === file_id
                                                  ? "bg-slate-500"
                                                  : ""
                                              )}
                                              title={file_name}
                                              onClick={async () => {
                                                await tv_ref.current.play_episode(
                                                  id
                                                );
                                                set_profile((prev) => {
                                                  if (prev === null) {
                                                    return prev;
                                                  }
                                                  return {
                                                    ...prev,
                                                    cur_episode:
                                                      tv_ref.current
                                                        .cur_episode,
                                                  };
                                                });
                                              }}
                                            >
                                              {e}
                                            </div>
                                          );
                                        })}
                                      </div>
                                    </div>
                                  );
                                })}
                              </div>
                            );
                            if (seasons.length === 1) {
                              return (
                                <div className="overflow-y-auto mt-8 pb-12 h-full">
                                  {episodes_elm}
                                </div>
                              );
                            }
                            return (
                              <Tabs
                                defaultValue="episode"
                                className="w-[400px] overflow-y-auto pb-12 h-full"
                              >
                                <TabsList>
                                  <TabsTrigger value="episode">
                                    集数
                                  </TabsTrigger>
                                  <TabsTrigger value="season">季</TabsTrigger>
                                </TabsList>
                                <TabsContent value="episode">
                                  {episodes_elm}
                                </TabsContent>
                                <TabsContent value="season">
                                  <div className="">
                                    {seasons.map((season) => {
                                      return (
                                        <div
                                          key={season}
                                          className={cn(
                                            "p-4 rounded cursor-pointer",
                                            season ===
                                              profile.cur_episode?.season
                                              ? "bg-slate-500"
                                              : ""
                                          )}
                                          onClick={async () => {
                                            await tv_ref.current.load_episodes_of_special_season(
                                              season
                                            );
                                            set_profile({
                                              cur_episode:
                                                tv_ref.current.cur_episode,
                                              info: tv_ref.current.info,
                                            });
                                          }}
                                        >
                                          {season}
                                        </div>
                                      );
                                    })}
                                  </div>
                                </TabsContent>
                              </Tabs>
                            );
                          })()}
                        </SheetContent>
                      </Sheet>
                      <Sheet>
                        <SheetTrigger>
                          <div className="flex flex-col items-center">
                            <Gauge className="w-6 h-6 text-gray-100 dark:text-gray-100" />
                            <p className="mt-2 text-sm text-gray-100 dark:text-gray-100">
                              倍速
                            </p>
                          </div>
                        </SheetTrigger>
                        <SheetContent position="bottom">
                          <p className="mt-8 text-center text-sm text-gray-100 dark:text-gray-100">
                            敬请期待
                          </p>
                        </SheetContent>
                      </Sheet>
                      <Sheet>
                        <SheetTrigger>
                          <div className="flex flex-col items-center">
                            <Glasses className="w-6 h-6 text-gray-100 dark:text-gray-100" />
                            <p className="mt-2 text-sm text-gray-100 dark:text-gray-100">
                              分辨率
                            </p>
                          </div>
                        </SheetTrigger>
                        <SheetContent position="bottom">
                          <p className="mt-8 text-center text-sm text-gray-100 dark:text-gray-100">
                            敬请期待
                          </p>
                        </SheetContent>
                      </Sheet>
                      <Sheet>
                        <SheetTrigger>
                          <div className="flex flex-col items-center focus:outline-none focus:ring-0">
                            <MoreHorizontal className="w-6 h-6 text-gray-100 dark:text-gray-100" />
                            <p className="mt-2 text-sm text-gray-100 dark:text-gray-100">
                              更多
                            </p>
                          </div>
                        </SheetTrigger>
                        <SheetContent position="bottom">
                          <p className="mt-8 text-center text-sm text-gray-100 dark:text-gray-100">
                            敬请期待
                          </p>
                        </SheetContent>
                      </Sheet>
                    </div>
                  </div>
                </div>
              </div>
              <div className="absolute z-20 w-full top-[24%]">
                <VideoPlayerWithoutSSR
                  className=""
                  url={url}
                  core={player_ref.current}
                  width={width}
                  height={height}
                  current_time={current_time}
                  poster={thumbnail}
                  on_progress={handle_video_playing}
                  on_end={async () => {
                    await tv_ref.current.play_next_episode();
                    set_profile({
                      cur_episode: tv_ref.current.cur_episode,
                      info: tv_ref.current.info,
                    });
                  }}
                />
                {/* <div className={cn("absolute inset-0")}>
                  <div
                    className={cn(
                      show_menus ? "hidden" : "block",
                      "absolute inset-0"
                    )}
                    onClick={toggle_menu_visible}
                  />
                  <div
                    className={cn(
                      show_menus ? "block" : "hidden",
                      "absolute left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%]"
                    )}
                    onClick={toggle_menu_visible}
                  >
                    {values.playing ? (
                      <div className="p4">
                        <Pause
                          className="w-16 h-16 text-gray-100 dark:text-gray-100"
                          onClick={async () => {
                            await player_ref.current.pause();
                            set_values(player_ref.current.values);
                            toggle_menu_visible();
                          }}
                        />
                      </div>
                    ) : (
                      <div className="p-4">
                        <div className="absolute p-2 z-10 inset-0 rounded-full bg-black opacity-50" />
                        <Play
                          className="relative z-20 left-1 w-16 h-16 text-gray-100 dark:text-gray-100"
                          onClick={async () => {
                            await player_ref.current.play();
                            set_values(player_ref.current.values);
                            set_show_menus(false);
                          }}
                        />
                      </div>
                    )}
                  </div>
                </div> */}
              </div>
            </div>
          );
        })()}
      </div>
      {/* <div className="tv__profile mt-8">
        {(() => {
          if (profile === null || profile.info === null) {
            return null;
          }
          const {
            name,
            overview,
            seasons,
            folders: episodes = [],
          } = profile.info;
          const has_more_season = seasons.length > 1;
          // console.log("[PAGE]play/[tv_id] - render episodes of cur season");
          return (
            <div className="overflow-hidden p-12 text-e">
              {profile.cur_episode ? (
                <div className="flex items-center text-3xl">
                  <p>{profile.cur_episode.episode} -</p>
                  {has_more_season && <p>{profile.cur_episode.season} -</p>}
                  <p>{profile.info.name}</p>
                </div>
              ) : null}
              <div className="mt-8 space-y-8">
                {episodes.map((e) => {
                  const { parent_paths, episodes: es } = e;
                  return (
                    <div key={parent_paths}>
                      <p>{parent_paths}</p>
                      <div className="grid grid-cols-4 gap-2 md:grid-cols-8 xl:grid-cols-12">
                        {es.map((ee) => {
                          const { id, file_id, file_name, episode } = ee;
                          return (
                            <Button
                              key={id}
                              variant={
                                profile?.cur_episode?.file_id === file_id
                                  ? "outline"
                                  : "default"
                              }
                              className="cursor-pointer"
                              title={file_name}
                              onClick={async () => {
                                await tv_ref.current.play_episode(id);
                                set_profile((prev) => {
                                  if (prev === null) {
                                    return prev;
                                  }
                                  return {
                                    ...prev,
                                    cur_episode: tv_ref.current.cur_episode,
                                  };
                                });
                              }}
                            >
                              {episode}
                            </Button>
                          );
                        })}
                      </div>
                    </div>
                  );
                })}
              </div>
              <div className="mt-8 grid grid-cols-4 gap-2">
                {(() => {
                  if (seasons.length === 1) {
                    return null;
                  }
                  return seasons.map((season, index) => {
                    return (
                      <Button
                        key={index}
                        disabled={season === profile.cur_episode?.season}
                        variant={"ghost"}
                        onClick={async () => {
                          await tv_ref.current.load_episodes_of_special_season(
                            season
                          );
                          set_profile({
                            cur_episode: tv_ref.current.cur_episode,
                            info: tv_ref.current.info,
                          });
                        }}
                      >
                        {season}
                      </Button>
                    );
                  });
                })()}
              </div>
              <div className="mt-8">
                <p className="mt-2 text-xl">{overview}</p>
              </div>
            </div>
          );
        })()}
      </div> */}
    </div>
  );
};

export default VideoPlayingPage;
