/**
 * @file 用户个人详情页
 */
import { useEffect, useRef, useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import { HelpCircle } from "lucide-react";

import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import {
  bind_searched_tv_for_tv,
  fetch_unknown_tv_list,
  UnknownTVItem,
} from "@/services";
import { TMDBSearcherDialog } from "@/components/TMDBSearcher/dialog";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import CopyAndCheckIcon from "@/components/CopyIcon";
import {
  add_aliyun_drive,
  fetch_aliyun_drives,
  AliyunDriveItem,
} from "@/domains/drive/services";
import useHelper from "@/domains/list-helper-hook";
import { SharedFilesAnalysis } from "@/domains/shared_files";
import { user } from "@/domains/user";
import { useToast } from "@/hooks/use-toast";
import { code_get_drive_token } from "@/constants";
import { copy } from "@/utils/front_end";
import { Result } from "@/types";
import DriveCard from "@/components/DriveCard";
import FolderCard from "@/components/FolderCard";

const UserProfilePage = () => {
  const [payload, set_payload] = useState("");
  const [visible, set_visible] = useState(false);
  const [drive_response, drive_helper] =
    useHelper<AliyunDriveItem>(fetch_aliyun_drives);
  const [unknown_tv_response, unknown_tv_helper] = useHelper<UnknownTVItem>(
    fetch_unknown_tv_list,
    {
      pageSize: 12,
    }
  );
  const cur_incorrect_tv_ref = useRef<UnknownTVItem | null>(null);
  const { toast } = useToast();
  const router = useRouter();

  useEffect(() => {
    (async () => {
      if (!user.is_login) {
        alert("请先登录");
        return;
      }
      drive_helper.init();
      unknown_tv_helper.init();
    })();
  }, []);

  const { dataSource: drives } = drive_response;
  const { dataSource: incorrect_tvs } = unknown_tv_response;

  return (
    <>
      <Head>
        <title>个人中心</title>
        <meta content="width=device-width, initial-scale=1" name="viewport" />
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {(() => {
        // if (!user.is_login) {
        //   return (
        //     <div>
        //       <div className="center center--top">Login...</div>
        //     </div>
        //   );
        // }
        return (
          <div className="min-h-screen py-8">
            <div className="m-auto w-[960px] space-y-4">
              <h2 className="h2 mt-4">个人中心</h2>
              <div className="section">
                <h2 className="my-2 text-2xl">常用功能</h2>
                <div className="grid grid-cols-6 gap-2">
                  <div
                    className="card cursor-pointer"
                    onClick={() => {
                      router.push("/admin/tv");
                    }}
                  >
                    <div>影片管理</div>
                  </div>
                  <div className="card cursor-pointer">
                    <div
                      onClick={() => {
                        router.push("/admin/task/list");
                      }}
                    >
                      <p>任务列表</p>
                    </div>
                  </div>
                  <div
                    className="card cursor-pointer"
                    onClick={() => {
                      set_visible(true);
                    }}
                  >
                    <div>TMDB 数据库</div>
                  </div>
                  <div
                    className="card cursor-pointer"
                    onClick={() => {
                      router.push("/admin/member");
                    }}
                  >
                    <div>所有成员</div>
                  </div>
                  <div
                    className="card cursor-pointer"
                    onClick={() => {
                      router.push("/admin/shared_files");
                    }}
                  >
                    <div>文件转存</div>
                  </div>
                  <div
                    className="card cursor-pointer"
                    onClick={() => {
                      router.push("/admin/shared_files_in_progress/list");
                    }}
                  >
                    <div>待处理更新</div>
                  </div>
                </div>
              </div>
              <div className="section">
                <h2 className="my-2 text-2xl">云盘列表</h2>
                <div className="grid grid-cols-3 gap-2">
                  {drives.map((drive) => {
                    const { id } = drive;
                    return (
                      <div key={id}>
                        <DriveCard {...drive} />
                      </div>
                    );
                  })}
                  <div className="card">
                    <div className="grid w-full gap-2">
                      <Textarea
                        placeholder="请输入云盘信息"
                        value={payload}
                        onChange={(event) => {
                          set_payload(event.target.value);
                        }}
                      />
                      <div className="grid grid-cols-12">
                        <Button
                          className="col-span-10"
                          onClick={async () => {
                            const resp = await add_aliyun_drive({
                              payload,
                            });
                            if (resp.error) {
                              alert(resp.error.message);
                              return;
                            }
                            set_payload("");
                            alert("新增成功");
                            drive_helper.refresh();
                          }}
                        >
                          添加云盘
                        </Button>
                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger className="col-span2">
                              <HelpCircle className="ml-4 w-6 h-6 text-gray-500" />
                            </TooltipTrigger>
                            <TooltipContent side="left">
                              <div className="p-4 w-[360px]">
                                <p>1、在网页端登录阿里云盘</p>
                                <p>2、复制下面代码</p>
                                <p>
                                  3、回到已登录的阿里云盘页面，在浏览器「地址栏」手动输入
                                  `javascript:`
                                </p>
                                <p>4、粘贴复制的代码并回车</p>
                                <div className="mt-2 border rounded-sm bg-gray-200">
                                  <div className="relative">
                                    <div className="overflow-y-auto h-[60px] break-all whitespace-pre-wrap">
                                      {code_get_drive_token}
                                    </div>
                                  </div>
                                </div>
                                <div className="mt-2 flex justify-end">
                                  <CopyAndCheckIcon
                                    on_click={() => {
                                      copy(code_get_drive_token);
                                    }}
                                  />
                                </div>
                              </div>
                            </TooltipContent>
                          </Tooltip>
                        </TooltipProvider>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="section">
                <h2 className="my-2 text-2xl">未识别的影视剧</h2>
                <div className="card grid grid-cols-6 gap-2">
                  {incorrect_tvs.map((tv) => {
                    const { id, name } = tv;
                    return (
                      <div key={id} className="p-2 cursor-pointer">
                        <FolderCard
                          name={name}
                          type="folder"
                          onClick={() => {
                            cur_incorrect_tv_ref.current = tv;
                            set_visible(true);
                          }}
                        />
                      </div>
                    );
                  })}
                </div>
                <div
                  className="mt-4 text-center cursor-pointer"
                  onClick={() => {
                    router.push("/admin/unknown_tv");
                  }}
                >
                  查看全部
                </div>
              </div>
            </div>
          </div>
        );
      })()}
      <TMDBSearcherDialog
        visible={visible}
        title={
          cur_incorrect_tv_ref.current
            ? `为 ${cur_incorrect_tv_ref.current.name} 修正`
            : "影视剧搜索"
        }
        on_submit={async (t) => {
          if (cur_incorrect_tv_ref.current === null) {
            alert("请先选择要修正的影片");
            return Result.Err("请先选择要修正的影片");
          }
          const r = await bind_searched_tv_for_tv(
            cur_incorrect_tv_ref.current.id,
            t
          );
          if (r.error) {
            alert(r.error.message);
            return r;
          }
          cur_incorrect_tv_ref.current = null;
          unknown_tv_helper.refresh();
          return Result.Ok(true);
        }}
        on_visible_change={(next_visible) => {
          set_visible(next_visible);
        }}
      />
    </>
  );
};

export default UserProfilePage;
